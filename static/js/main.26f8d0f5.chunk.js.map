{"version":3,"sources":["componentes/Header.js","context/GlobalState.js","componentes/Balance.js","componentes/IncomeExpenses.js","componentes/AddTransaction.js","componentes/Transaction.js","componentes/TransactionList.js","App.js","index.js"],"names":["Header","AppReducer","state","action","type","arr","JSON","parse","localStorage","getItem","filter","item","id","payload","setItem","stringify","transactions","tr","arreglo","push","initialState","console","log","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","transaction","monto","reduce","acc","toFixed","IncomeExpenses","amounts","ingresos","gastos","className","AddTransaction","useState","text","setText","amount","setAmount","onSubmit","e","preventDefault","Math","floor","random","texto","htmlFor","onChange","target","name","placeholder","Transaction","sign","abs","onClick","TransactionList","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26f8d0f5.chunk.js","sourcesContent":["// Para crear un componente funcional, con el snippet 'rafce' se crea uno\r\n\r\nimport React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h2>Administrador de gastos</h2>;\r\n};\r\n\r\nexport default Header;\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\n//Reducer\r\nconst AppReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      let arr = JSON.parse(localStorage.getItem(\"gastos\"));\r\n      arr = arr.filter((item) => item.id !== action.payload);\r\n      localStorage.setItem(\"gastos\", JSON.stringify(arr));\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          (tr) => tr.id !== action.payload\r\n        ),\r\n      };\r\n\r\n    case \"ADD_TRANSACTION\":\r\n      let arreglo = JSON.parse(localStorage.getItem(\"gastos\"));\r\n      arreglo.push(action.payload);\r\n      localStorage.setItem(\"gastos\", JSON.stringify(arreglo));\r\n      return {\r\n        ...state,\r\n        transactions: [action.payload, ...state.transactions],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//State inicial: información que se podrá usar a lo largo de toda la App\r\nif (localStorage.getItem(\"gastos\") === null) {\r\n  localStorage.setItem(\"gastos\", \"[]\");\r\n} else {\r\n  localStorage.getItem(\"gastos\");\r\n}\r\nconst initialState = {\r\n  transactions: JSON.parse(localStorage.getItem(\"gastos\")),\r\n};\r\n\r\nconsole.log(initialState.transactions);\r\n\r\n//Crear context: se crea el contexto con datos, que es el initialState, y esto deberán importar los componentes que quieras usar los datos\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider: hay que \"envolver\" a toda la app con un provider, para permitir que la info sea accesible; 'children' son todos los componentes de la App, que es un props, pero acá lo estamos extrayendo\r\nexport const GlobalProvider = ({ children }) => {\r\n  //Reducer: utiliza un 'dispatch'\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  //Acciones\r\n  function deleteTransaction(id) {\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: id,\r\n    });\r\n  }\r\n\r\n  function addTransaction(tr) {\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: tr,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((transaction) => transaction.monto);\r\n\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h4>Balance</h4>\r\n      <h2>${total}</h2>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((tr) => tr.monto);\r\n\r\n  const ingresos = amounts\r\n    .filter((item) => item > 0)\r\n    .reduce((total, item) => (total += item), 0)\r\n    .toFixed(2);\r\n\r\n  const gastos = amounts\r\n    .filter((item) => item < 0)\r\n    .reduce((total, item) => (total += item), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Ingreso</h4>\r\n        <p className=\"money plus\">+${ingresos}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Gasto</h4>\r\n        <p className=\"money minus\">-${gastos}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeExpenses;\r\n","import React, { Fragment, useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst AddTransaction = () => {\r\n  // Hook 'useState': creo un pedazo de información, y luego una función para modificar esa información, y en useState pongo el valor por default\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    let id = Math.floor(Math.random() * 1000000);\r\n    const tr = { id, texto: text, monto: +amount };\r\n    addTransaction(tr);\r\n    setText(\"\");\r\n    setAmount(0);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3>Agregá una nueva transacción</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Texto</label>\r\n          {/* En el input, el value es el dato del state, y en onChange/onClick, llamo a la función establecida en el hook, y puedo usar el evento */}\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            name=\"text\"\r\n            placeholder=\"Ingresa texto...\"\r\n          />\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"amount\">\r\n              Monto <br />\r\n              (negativo: gasto / positivo: ingreso)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              value={amount}\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              name=\"amount\"\r\n              placeholder=\"Ingrese monto...\"\r\n            />\r\n          </div>\r\n          <button className=\"btn\">Agregar transacción</button>\r\n        </div>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n\r\n// import React, { Fragment, useState } from \"react\";\r\n\r\n// const AddTransaction = () => {\r\n//   // Hook 'useState': creo un pedazo de información, y luego una función para modificar esa información, y en useState pongo el valor por default\r\n//   // const [text, setText] = useState(\"\");\r\n//   // const [amount, setAmount] = useState(0);\r\n\r\n//   const [estado, setEstado] = useState({\r\n//     texto: \"\",\r\n//     cantidad: 0,\r\n//   });\r\n\r\n//   const onChange = (e) => {\r\n//     setEstado({ ...estado, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <h3>Agregá una nueva transacción</h3>\r\n//       <form>\r\n//         <div className=\"form-control\">\r\n//           <label htmlFor=\"text\">Texto</label>\r\n//           {/* En el input, el value es el dato del state, y en onChange/onClick, llamo a la función establecida en el hook, y puedo usar el evento */}\r\n//           <input\r\n//             type=\"text\"\r\n//             value={estado.texto}\r\n//             onChange={onChange}\r\n//             name=\"texto\"\r\n//             placeholder=\"Ingresa texto...\"\r\n//           />\r\n//           <div className=\"form-control\">\r\n//             <label htmlFor=\"amount\">\r\n//               Monto <br />\r\n//               (negativo: gasto / positivo: ingreso)\r\n//             </label>\r\n//             <input\r\n//               type=\"number\"\r\n//               value={estado.cantidad}\r\n//               onChange={onChange}\r\n//               name=\"cantidad\"\r\n//               placeholder=\"Ingrese monto...\"\r\n//             />\r\n//           </div>\r\n//           <button className=\"btn\">Agregar transacción</button>\r\n//         </div>\r\n//       </form>\r\n//     </Fragment>\r\n//   );\r\n// };\r\n\r\n// export default AddTransaction;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Transaction = ({ tr }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n  const sign = tr.monto < 0 ? \"-\" : \"+\";\r\n  return (\r\n    <li className={tr.monto < 0 ? \"minus\" : \"plus\"}>\r\n      {tr.texto}{\" \"}\r\n      <span>\r\n        {sign}${Math.abs(tr.monto)}\r\n      </span>\r\n      <button onClick={() => deleteTransaction(tr.id)} className=\"delete-btn\">\r\n        Borrar\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport Transaction from \"./Transaction\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst TransactionList = () => {\r\n  //Para poder usar la data global de Context, primero tengo que importar, y luego guardarme en una variable usando el Hook 'useContext'\r\n  //const context = useContext(GlobalContext);\r\n  //Es mejor desestructurar el objeto, haciendo un pull out de transactions, que es el array de la lista de expenses\r\n  const { transactions } = useContext(GlobalContext);\r\n  return (\r\n    <Fragment>\r\n      <h3>Historial</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map((tr) => (\r\n          <Transaction tr={tr} key={tr.id} />\r\n        ))}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React from \"react\";\n// Importo los componentes necesarios de la App\nimport Header from \"./componentes/Header\";\nimport Balance from \"./componentes/Balance\";\nimport IncomeExpenses from \"./componentes/IncomeExpenses\";\nimport AddTransaction from \"./componentes/AddTransaction\";\n//Traer el context global\nimport { GlobalProvider } from \"./context/GlobalState\";\n//\nimport \"./App.css\";\nimport TransactionList from \"./componentes/TransactionList\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}